// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"asio_enter_context", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.asio-enter-context.php\n * )\n *\n * Enter new scheduler context\n *\n */", 
"asio_exit_context", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.asio-exit-context.php )\n *\n * Exit last opened scheduler context\n *\n */", 
"asio_get_current", T(Object), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.asio-get-current.php )\n *\n * Get currently running wait handle, or null if there is none\n *\n * @return     object  A runnable WaitHandle that is currently running\n */", 
"asio_set_on_failed_callback", T(Void), S(0), "on_failed_cb", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.asio-set-on-failed-callback.php )\n *\n * Set callback to be called when wait handle fails\n *\n * @on_failed_cb\n *             object  A Closure to be called when wait handle fails\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"WaitHandle", "", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.construct.php )\n *\n *\n */", S(16640),"import", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.import.php )\n *\n * Import this wait handle to the current scheduler context\n *\n */", S(16384),"join", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.join.php )\n *\n * Wait until this wait handle is finished and return its result\n *\n * @return     mixed   A result of the operation represented by given wait\n *                     handle\n */", S(16384),"isFinished", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.isfinished.php )\n *\n * Check if this wait handle finished (succeeded or failed)\n *\n * @return     bool    A boolean indicating whether this wait handle\n *                     finished\n */", S(16384),"isSucceeded", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.issucceeded.php )\n *\n * Check if this wait handle succeeded\n *\n * @return     bool    A boolean indicating whether this wait handle\n *                     succeeded\n */", S(16384),"isFailed", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.isfailed.php )\n *\n * Check if this wait handle failed\n *\n * @return     bool    A boolean indicating whether this wait handle failed\n */", S(16384),"getID", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.getid.php )\n *\n * Get unique ID of this wait handle (amongst existing ones)\n *\n * @return     int     An integer representing unique ID of this wait\n *                     handle\n */", S(16384),"getName", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/waithandle.getname.php )\n *\n * Get name of the operation behind this wait handle\n *\n * @return     string  A name of the operation behind this wait handle\n */", S(16384),"getExceptionIfFailed", T(Object), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/waithandle.getexceptioniffailed.php )\n *\n * Get exception if this wait handle has failed, or null\n *\n * @return     object  An exception if this wait handle has failed, or null\n */", S(16384),NULL,NULL,NULL,
S(16400), "/**\n * ( excerpt from http://php.net/manual/en/class.waithandle.php )\n *\n * A wait handle representing asynchronous operation\n *\n */", "StaticWaitHandle", "waithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from http://php.net/manual/en/staticwaithandle.construct.php )\n *\n *\n */", S(16640),NULL,NULL,NULL,
S(16400), "/**\n * ( excerpt from http://php.net/manual/en/class.staticwaithandle.php )\n *\n * A wait handle that is always finished\n *\n */", "StaticResultWaitHandle", "staticwaithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from\n * http://php.net/manual/en/staticresultwaithandle.construct.php )\n *\n *\n */", S(16640),"create", T(Object), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16896), "/**\n * ( excerpt from\n * http://php.net/manual/en/staticresultwaithandle.create.php )\n *\n * Create a wait handle that always succeeds with a given result\n *\n * @result     mixed   A result wait handle will succeed with\n *\n * @return     object  A StaticResultWaitHandle representing given result\n */", S(16896),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.staticresultwaithandle.php\n * )\n *\n * A wait handle representing static result\n *\n */", "StaticExceptionWaitHandle", "staticwaithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from\n * http://php.net/manual/en/staticexceptionwaithandle.construct.php )\n *\n *\n */", S(16640),"create", T(Object), S(0), "exception", T(Object), NULL, S(0), NULL, S(0), NULL, S(16896), "/**\n * ( excerpt from\n * http://php.net/manual/en/staticexceptionwaithandle.create.php )\n *\n * Create a wait handle that always fails with a given exception\n *\n * @exception  object  An exception wait handle will fail with\n *\n * @return     object  A StaticExceptionWaitHandle representing given\n *                     exception\n */", S(16896),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/class.staticexceptionwaithandle.php )\n *\n * A wait handle representing statically failed operation\n *\n */", "WaitableWaitHandle", "waithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from http://php.net/manual/en/waitablewaithandle.construct.php\n * )\n *\n *\n */", S(16640),"getParents", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/waitablewaithandle.getparents.php )\n *\n * Get wait handles blocked on this wait handle\n *\n * @return     vector  An array of BlockableWaitHandles blocked on this\n *                     wait handle\n */", S(16384),"getStackTrace", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/waitablewaithandle.getstacktrace.php )\n *\n * Get stack trace of this wait handle\n *\n * @return     vector  An array of WaitableWaitHandles representing full\n *                     stack trace, starting with this wait handle\n */", S(16384),NULL,NULL,NULL,
S(16400), "/**\n * ( excerpt from http://php.net/manual/en/class.waitablewaithandle.php )\n *\n * A wait handle that can be waited upon\n *\n */", "BlockableWaitHandle", "waitablewaithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from\n * http://php.net/manual/en/blockablewaithandle.construct.php )\n *\n *\n */", S(16640),NULL,NULL,NULL,
S(16400), "/**\n * ( excerpt from http://php.net/manual/en/class.blockablewaithandle.php )\n *\n * A wait handle that can be blocked on a dependency\n *\n */", "ContinuationWaitHandle", "blockablewaithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.construct.php )\n *\n *\n */", S(16640),"start", T(Object), S(0), "continuation", T(Object), NULL, S(0), NULL, S(0), "prio", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/continuationwaithandle.start.php\n * )\n *\n * Start asynchronous execution of a given Continuation\n *\n * @continuation\n *             object  A Continuation to be started\n * @prio       int     Execution priority\n *\n * @return     object  A WaitHandle representing started Continuation\n */", S(16896),"markCurrentAsSucceeded", T(Void), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16896), "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.markcurrentassucceeded.php\n * )\n *\n * Mark currently running Continuation as succeeded and set its result\n *\n * @result     mixed   A result of the currently running Continuation\n */", S(16896),"markCurrentAsTailCall", T(Void), S(0), NULL, S(16896), "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.markcurrentastailcall.php\n * )\n *\n * Mark currently running Continuation for a tail call execution\n *\n */", S(16896),"getPrivData", T(Object), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.getprivdata.php )\n *\n * Get user's private data\n *\n * @return     object  An Object with user's private data\n */", S(16384),"setPrivData", T(Void), S(0), "data", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.setprivdata.php )\n *\n * Set user's private data\n *\n * @data       object  An Object with user's private data\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.continuationwaithandle.php\n * )\n *\n * A wait handle representing asynchronous execution powered by\n * Continuation\n *\n */", "GenArrayWaitHandle", "blockablewaithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from http://php.net/manual/en/genarraywaithandle.construct.php\n * )\n *\n *\n */", S(16640),"create", T(Object), S(0), "dependencies", T(Array), NULL, S(0), NULL, S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/genarraywaithandle.create.php )\n *\n * Create a wait handle that waits for a given array of dependencies\n *\n * @dependencies\n *             map     An Array of dependencies to wait for\n *\n * @return     object  A WaitHandle that will wait for a given array of\n *                     dependencies and return their results\n */", S(16896),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.genarraywaithandle.php )\n *\n * A wait handle representing an array of asynchronous operations\n *\n */", "SetResultToRefWaitHandle", "blockablewaithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from\n * http://php.net/manual/en/setresulttorefwaithandle.construct.php )\n *\n *\n */", S(16640),"create", T(Object), S(0), "wait_handle", T(Object), NULL, S(0), NULL, S(0), "ref", T(Variant), NULL, S(0), NULL, S(1), NULL, S(16896), "/**\n * ( excerpt from\n * http://php.net/manual/en/setresulttorefwaithandle.create.php )\n *\n * Create a wait handle that stores result of a dependency to a given\n * reference\n *\n * @wait_handle\n *             object  A wait handle to wait for\n * @ref        mixed   A reference to set the result to\n *\n * @return     object  A WaitHandle that will store the result of a\n *                     dependency to a given reference\n */", S(16896),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/class.setresulttorefwaithandle.php )\n *\n * A wait handle proxy that sets result to a given reference\n *\n */", "RescheduleWaitHandle", "waitablewaithandle", NULL, "__construct", T(Void), S(0), NULL, S(16640), "/**\n * ( excerpt from\n * http://php.net/manual/en/reschedulewaithandle.construct.php )\n *\n *\n */", S(16640),"create", T(Object), S(0), "queue", T(Int32), NULL, S(0), NULL, S(0), "priority", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/reschedulewaithandle.create.php\n * )\n *\n * Create a wait handle that succeeds once desired scheduling priority is\n * eligible for execution\n *\n * @queue      int     A scheduling queue to use (defined by QUEUE_*\n *                     constants)\n * @priority   int     A non-negative number indicating scheduling priority\n *                     (0 runs first)\n *\n * @return     object  A RescheduleWaitHandle that succeeds once desired\n *                     scheduling priority is eligible for execution\n */", S(16896),NULL,NULL,"QUEUE_DEFAULT", T(Int32),"QUEUE_NO_PENDING_IO", T(Int32),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.reschedulewaithandle.php )\n *\n * A wait handle that succeeds with null once desired scheduling priority\n * is eligible for execution\n *\n */", 
#endif
